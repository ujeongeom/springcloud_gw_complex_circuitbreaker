##############
### local
##############
server:
  port: 8080
spring:
  datasource:
    platform: mariadb
    driverClassName: org.mariadb.jdbc.Driver
    url: jdbc:mariadb://211.43.13.1:32462/edu
    username: admin
    password: New1234!


# spring boot - actuator expose
management:
  endpoints:
    health:
      show-details: always
      enabled: true
    loggers:
      enabled: true  
    prometheus:
      enabled: true
    gateway:
      enabled: true
    circuitbreakers: ## circuit breaker
      enabled: true
    ratelimiters:
      enabled: true
    web:
      exposure:
        include: "*"
  endpoint:
    health:
      probes:
        enabled: true

#circuitbreaker
resilience4j.circuitbreaker:
  configs:
    default:
      registerHealthIndicator: true
      slidingWindowType: COUNT_BASED
      slidingWindowSize: 5 # 10 # {통계건수} : 서킷 CLOSE 상태에서 N회 호출 도달 시 failureRateThreshold 실패 비율 계산
      minimumNumberOfCalls: 10 # {최소요청횟수} : 집계에 필요한 최소 호출 수
      failureRateThreshold: 10 #60 # {실패율} : 실패 설정% 이상 시 서킷 오픈
      slowCallRateThreshold: 60 # {느린요청비율} : 설정값 이상 소요 시 실패로 간주
      slowCallDurationThreshold: 3000 # {느린요청으로 간주할 시간}
      permittedNumberOfCallsInHalfOpenState: 2 # HALFOPEN -> CLOSE or OPEN 으로 판단하기 위해 호출 횟수
      waitDurationInOpenState: 30s # 5s # {Circuit Breaker유지시간} : OPEN -> HALF-OPEN 전환 전 기다리는 시간
      eventConsumerBufferSize: 10
  instances:
    apigw:
      baseConfig: default
      timeout-duration: 3s # 요청 시간 제한
    #testcirguitbreaker:
    #  baseConfig: default
    #  timeout-duration: 3s # 요청 시간 제한

# ratelimiter
resilience4j.ratelimiter:
  configs:
    default:
      registerHealthIndicator: false
      limitForPeriod: 10 #cycle 동안 호출할 수 있는 횟수
      limitRefreshPeriod: 1s #cycle이 가지는 주기, cycle 주기가 끝나면 호출 가능 횟수는 다시 리셋된다.
      timeoutDuration: 0 #호출 thread가 rateLimit에 대해서 접근 허가를 얻기위해서 대기하는 시간
      eventConsumerBufferSize: 100
  instances:
    backendA:
      baseConfig: default
    backendB:
      limitForPeriod: 6
      limitRefreshPeriod: 500ms
      timeoutDuration: 3s

# command + /  : muilti comment
# timelimiter
#resilience4j.timelimiter:
#  configs:
#    default:
#      cancelRunningFuture: false
#      timeoutDuration: 2s
#  instances:
#    backendA:
#      baseConfig: default
#    backendB:
#      baseConfig: default


# app
app-info:
  node-ip: "192.168.0.1"
  pod-ip: "192.168.0.1"
  pod-name: "test"
  app-name: "edu11"

springdoc:
  show-actuator: true  # actuator swagger 노출
  swagger-ui:
    groups-order: DESC
    #operations-sorter: alpha
    #tags-sorter: alpha
    disable-swagger-default-url: true
    #doc-expansion: none

logging:
  level:
    com.kt.edu: debug
    org.springframework.cloud.gateway: debug

